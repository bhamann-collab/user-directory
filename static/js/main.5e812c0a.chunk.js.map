{"version":3,"sources":["components/Employee.js","components/Filter.js","App.js","serviceWorker.js","index.js"],"names":["Employee","props","name","occupation","Filter","Form","className","Group","controlId","Label","Control","placeholder","Button","variant","onClick","ascendNames","decendNames","employeesData","App","useState","employees","setEmployees","listItems","map","employee","sort","a","b","localeCompare","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wQAUeA,G,MARE,SAACC,GACd,OACI,6BACI,4BAAI,8BAAOA,EAAMC,MAAjB,IAA8B,8BAAOD,EAAME,gB,gBCkBxCC,EApBA,SAACH,GACZ,OACI,6BACI,kBAACI,EAAA,EAAD,CAAMC,UAAU,cACZ,kBAACD,EAAA,EAAKE,MAAN,CAAYC,UAAU,iBAAiBF,UAAU,kBAC7C,kBAACD,EAAA,EAAKI,MAAN,0BACA,kBAACJ,EAAA,EAAKK,QAAN,CAAcC,YAAY,gBAG9B,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAASb,EAAMc,aAAzC,wBAGA,kBAACH,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAASb,EAAMe,aAAzC,2BCVZC,EAAgB,CAChB,CACIf,KAAM,OACNC,WAAY,eAEhB,CACID,KAAM,SACNC,WAAY,cAEhB,CACID,KAAM,OACNC,WAAY,eAEhB,CACID,KAAM,QACNC,WAAY,aAEhB,CACID,KAAM,SACNC,WAAY,cAEhB,CACID,KAAM,OACNC,WAAY,eAEhB,CACID,KAAM,SACNC,WAAY,eAEhB,CACID,KAAM,SACNC,WAAY,mBAEhB,CACID,KAAM,QACNC,WAAY,aAEhB,CACID,KAAM,UACNC,WAAY,WAEhB,CACID,KAAM,WACNC,WAAY,SAEhB,CACID,KAAM,QACNC,WAAY,cAmCLe,MA/Bf,WAAgB,IAAD,EACsBC,mBAASF,GAD/B,mBACLG,EADK,KACMC,EADN,KAWLC,EAAYF,EAAUG,KAAI,SAACC,GAAD,OACxB,oCACI,kBAAC,EAAD,CACItB,KAAMsB,EAAStB,KACfC,WAAYqB,EAASrB,iBAKrC,OACI,yBAAKG,UAAU,OACV,kBAAC,EAAD,CACGS,YApBZ,WACIM,EAAa,YAAID,GAAWK,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAExB,KAAK0B,cAAcD,EAAEzB,WAoB1Dc,YAjBZ,WACIK,EAAa,YAAID,GAAWK,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEzB,KAAK0B,cAAcF,EAAExB,aAkB9D,4BAAKoB,KCtEGO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5e812c0a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Employee = (props) => {\r\n    return (\r\n        <div>\r\n            <h1><span>{props.name}</span> <span>{props.occupation}</span></h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Employee\r\n","import React from 'react'\r\nimport { Form, Button } from 'react-bootstrap'\r\n\r\nconst Filter = (props) => {\r\n    return (\r\n        <div>\r\n            <Form className=\"filterForm\">\r\n                <Form.Group controlId=\"formBasicEmail\" className=\"formOccupation\">\r\n                    <Form.Label>Filter Occupation</Form.Label>\r\n                    <Form.Control placeholder=\"Occupation\" />\r\n                </Form.Group>\r\n\r\n                <Button variant=\"primary\" onClick={props.ascendNames}>\r\n                    Sort Names Ascending\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={props.decendNames}>\r\n                    Sort Names Decending\r\n                </Button>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filter\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport Employee from './components/Employee'\nimport Filter from './components/Filter'\n\nlet employeesData = [\n    {\n        name: 'Matt',\n        occupation: 'Engineering'\n    },\n    {\n        name: 'Nathan',\n        occupation: 'Accounting'\n    },\n    {\n        name: 'Dean',\n        occupation: 'Engineering'\n    },\n    {\n        name: 'Jacob',\n        occupation: 'Marketing'\n    },\n    {\n        name: 'Jessie',\n        occupation: 'Accounting'\n    },\n    {\n        name: 'Dave',\n        occupation: 'Engineering'\n    },\n    {\n        name: 'Fergus',\n        occupation: 'Engineering'\n    },\n    {\n        name: 'Hadley',\n        occupation: 'Human Resources'\n    },\n    {\n        name: 'Jayda',\n        occupation: 'Counselor'\n    },\n    {\n        name: 'Delilah',\n        occupation: 'Manager'\n    },\n    {\n        name: 'Kathleen',\n        occupation: 'Sales'\n    },\n    {\n        name: 'Karly',\n        occupation: 'Marketing'\n    }\n]\n\nfunction App() {\n    const[employees, setEmployees] = useState(employeesData)\n\n    function ascendNames() {\n        setEmployees([...employees].sort((a, b) => a.name.localeCompare(b.name)))\n    }\n\n    function descendNames() {\n        setEmployees([...employees].sort((a, b) => b.name.localeCompare(a.name)))\n    }\n\n    const listItems = employees.map((employee) => \n            <>\n                <Employee\n                    name={employee.name}\n                    occupation={employee.occupation}\n                />\n            </>\n    )\n\n    return (\n        <div className=\"App\">\n             <Filter \n                ascendNames={ascendNames}\n                decendNames={descendNames}\n             />\n            <ul>{listItems}</ul>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}